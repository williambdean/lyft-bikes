{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Lyft Bike Share Data","text":"<p>Python client for Lyft bike share data.</p>"},{"location":"#features","title":"Features","text":"<ul> <li>Support for cities with Lyft bike share</li> <li>Historical trips</li> <li>Live station and bike / scooter availability</li> <li>Applying pricing to trips<ul> <li>Unlock Fees</li> <li>Minute Rates</li> </ul> </li> </ul>"},{"location":"#installation","title":"Installation","text":"<p>Install from <code>pip</code></p> <pre><code>$ pip install lyft-bikes\n</code></pre>"},{"location":"#documentation","title":"Documentation","text":"<p>The documentation is hosted on GitHub Pages.</p>"},{"location":"#development","title":"Development","text":"<p>The development environment was created with <code>poetry</code>. The <code>pyproject.toml</code> file is the main configuration file for the project.</p> <pre><code>poetry install .\n</code></pre>"},{"location":"#contributing","title":"Contributing","text":"<p>If you would like to contribute or find some issue in the code, please open an Issue or a PR on GitHub. Thanks!</p>"},{"location":"examples/historical-trips/","title":"Historical Trips","text":"<p>The <code>lyft_bikes</code> package provides access to historical trips for cities with Lyft bike share.</p> <p>Read into a <code>pandas.DataFrame</code> with the <code>read_historical_trips</code> function.</p> <pre><code>import lyft_bikes\n\ncity = \"Chicago\"\nstart_date = \"2023-01-01\"\nend_date = \"2023-01-31\"\n\ndf_trips_chicago = lyft_bikes.read_historical_trips(\n    start_date=start_date,\n    end_date=end_date,\n    city=city\n)\n</code></pre> <pre><code>            ride_id  rideable_type           started_at             ended_at           start_station_name  ...  start_lat  start_lng    end_lat    end_lng  member_casual\n0  F96D5A74A3E41399  electric_bike  2023-01-21 20:05:42  2023-01-21 20:16:33  Lincoln Ave &amp; Fullerton Ave  ...  41.924074 -87.646278  41.930000 -87.640000         member\n1  13CB7EB698CEDB88   classic_bike  2023-01-10 15:37:36  2023-01-10 15:46:05        Kimbark Ave &amp; 53rd St  ...  41.799568 -87.594747  41.809835 -87.599383         member\n2  BD88A2E670661CE5  electric_bike  2023-01-02 07:51:57  2023-01-02 08:05:11       Western Ave &amp; Lunt Ave  ...  42.008571 -87.690483  42.039742 -87.699413         casual\n3  C90792D034FED968   classic_bike  2023-01-22 10:52:58  2023-01-22 11:01:44        Kimbark Ave &amp; 53rd St  ...  41.799568 -87.594747  41.809835 -87.599383         member\n4  3397017529188E8A   classic_bike  2023-01-12 13:58:01  2023-01-12 14:13:20        Kimbark Ave &amp; 53rd St  ...  41.799568 -87.594747  41.809835 -87.599383         member\n</code></pre> <p>Read the comparable data for New York City:</p> <pre><code>city = \"New York City\"\n\ndf_trips_nyc = lyft_bikes.read_historical_trips(\n    start_date=start_date,\n    end_date=end_date,\n    city=city\n)\n</code></pre> <pre><code>            ride_id  rideable_type           started_at             ended_at                  start_station_name  ...  start_lat  start_lng    end_lat    end_lng  member_casual\n0  4A86C1475DCCADA0   classic_bike  2023-01-26 10:53:44  2023-01-26 11:05:17               E 53 St &amp; Madison Ave  ...  40.759724 -73.973664  40.777057 -73.978985         member\n1  AE02E1FF7E264874   classic_bike  2023-01-04 11:51:54  2023-01-04 12:07:09               Halsey St &amp; Ralph Ave  ...  40.684970 -73.922755  40.693261 -73.968896         casual\n2  D3F9A2A71AD244C6   classic_bike  2023-01-04 17:26:48  2023-01-04 17:43:29                 Bank St &amp; Hudson St  ...  40.736566 -74.006092  40.767272 -73.993929         casual\n3  3D48C6F33AFEF329   classic_bike  2023-01-04 08:31:11  2023-01-04 08:42:12               E 53 St &amp; Madison Ave  ...  40.759711 -73.974023  40.759291 -73.988597         member\n4  4865926C3D97BA01  electric_bike  2023-01-03 22:15:34  2023-01-03 22:30:35  Frederick Douglass Blvd &amp; W 112 St  ...  40.801694 -73.957145  40.765909 -73.976342         casual\n</code></pre>"},{"location":"examples/new-pricing/","title":"New Prices","text":"<p>Prices can be created by adding together <code>UnlockFee</code> and <code>MinuteRate</code> objects. The <code>UnlockFee</code> is a one-time fee charged at the start of the trip. The <code>MinuteRate</code> is the price per minute after the first <code>start</code> minutes.</p> <pre><code>pricing = UnlockFee(unlock_fee) + MinuteRate(minute_rate, start=start_minute)\n</code></pre> <p>A pricing instance can be called with a number of minutes to get the total price for a trip of that length.</p> <pre><code>pricing(minutes)\n</code></pre> <p>Below is an example of comparing two different pricing schemes.</p> <pre><code>import numpy as np\n\nimport matplotlib.pyplot as plt\n\nfrom lyft_bikes.pricing import UnlockFee, MinuteRate\n\npricing_1 = UnlockFee(0.5) + MinuteRate(0.10, start=30)\npricing_2 = UnlockFee(1.0) + MinuteRate(0.05, start=30)\n\nminutes = np.arange(0, 90)\n\nax = plt.gca()\nax.plot(minutes, pricing_1(minutes), label=\"Pricing 1\")\nax.plot(minutes, pricing_2(minutes), label=\"Pricing 2\")\nax.set_ylim(0, None)\nax.set(\n    title=\"Pricing Comparison\",\n    xlabel=\"Minutes\",\n    ylabel=\"Price ($)\",\n)\nplt.legend()\nplt.show()\n</code></pre> <p></p>"},{"location":"modules/","title":"Overview","text":""},{"location":"modules/#lyft_bikes.read_historical_trips","title":"<code>read_historical_trips(start_date, city, end_date=None)</code>","text":"<p>Read historical trips within given range of dates for a city.</p> <p>Parameters:</p> Name Type Description Default <code>start_date</code> <code>str</code> <p>start date for the data in %Y-%m-%d format</p> required <code>city</code> <code>str</code> <p>city to read data from</p> required <code>end_date</code> <code>Union[str, None]</code> <p>end date in the same format. Defaults to last date available</p> <code>None</code> <p>Returns:</p> Type Description <code>DataFrame</code> <p>Historical trip DataFrame for the date range provided.</p> <p>Examples:</p> <p>Read trips from Jan 1st 2021 until Feb 1st 2021 in Chicago</p> <pre><code>import lyft_bikes\n\ndf = lyft_bikes.read_historical_trips(\n    start_date=\"2021-01-01\",\n    end_date=\"2021-02-01\",\n    city=\"Chicago\",\n)\n</code></pre> Source code in <code>lyft_bikes/__init__.py</code> <pre><code>def read_historical_trips(\n    start_date: str,\n    city: str,\n    end_date: Union[str, None] = None,\n) -&gt; pd.DataFrame:\n    \"\"\"Read historical trips within given range of dates for a city.\n\n    Args:\n        start_date: start date for the data in %Y-%m-%d format\n        city: city to read data from\n        end_date: end date in the same format. Defaults to last date available\n\n    Returns:\n        Historical trip DataFrame for the date range provided.\n\n    Examples:\n        Read trips from Jan 1st 2021 until Feb 1st 2021 in Chicago\n\n        ```python\n        import lyft_bikes\n\n        df = lyft_bikes.read_historical_trips(\n            start_date=\"2021-01-01\",\n            end_date=\"2021-02-01\",\n            city=\"Chicago\",\n        )\n        ```\n\n\n    \"\"\"\n    if city not in CITY_DOWNLOADERS:\n        raise ValueError(\n            f\"City {city} is not supported. Supported cities are {CITY_DOWNLOADERS.keys()}\"\n        )\n\n    dates = CITY_DATES.get(city, bike_dates.DefaultDates)()\n\n    downloader = CITY_DOWNLOADERS[city]()\n    trips = HistoricalTrips(\n        dates=dates,\n        downloader=downloader,\n    )\n    return trips.read(start_date=start_date, end_date=end_date)\n</code></pre>"},{"location":"modules/#lyft_bikes.read_live_bikes","title":"<code>read_live_bikes(city)</code>","text":"<p>Read currently available bikes and scooters.</p> <p>Parameters:</p> Name Type Description Default <code>city</code> <code>str</code> <p>city to read data from</p> required <p>Returns:</p> Type Description <code>DataFrame</code> <p>DataFrame with the current status of bikes and scooters.</p> Source code in <code>lyft_bikes/__init__.py</code> <pre><code>@chicago_only_error\ndef read_live_bikes(city: str) -&gt; pd.DataFrame:\n    \"\"\"Read currently available bikes and scooters.\n\n    Args:\n        city: city to read data from\n\n    Returns:\n        DataFrame with the current status of bikes and scooters.\n\n    \"\"\"\n    live = Bikes()\n    return live.read()\n</code></pre>"},{"location":"modules/#lyft_bikes.read_stations","title":"<code>read_stations(city)</code>","text":"<p>Read information and status for each station.</p> <p>Parameters:</p> Name Type Description Default <code>city</code> <code>str</code> <p>city to read data from</p> required <p>Returns:</p> Type Description <code>DataFrame</code> <p>DataFrame with the stations information and status.</p> Source code in <code>lyft_bikes/__init__.py</code> <pre><code>@chicago_only_error\ndef read_stations(city: str) -&gt; pd.DataFrame:\n    \"\"\"Read information and status for each station.\n\n    Args:\n        city: city to read data from\n\n    Returns:\n        DataFrame with the stations information and status.\n\n    \"\"\"\n    station_info = StationInfo()\n    station_status = StationStatus()\n\n    return pd.merge(\n        station_status.read(),\n        station_info.read(),\n        how=\"inner\",\n        on=[\"station_id\", \"legacy_id\"],\n    )\n</code></pre>"},{"location":"modules/bikes/","title":"Bikes","text":"<p>Access the live feed of bikes and scooters. More to come.</p>"},{"location":"modules/bikes/#lyft_bikes.bikes.Bikes","title":"<code>Bikes</code>","text":"<p>               Bases: <code>LiveRequest</code></p> <p>Fetch the live feed of bikes and scooters.</p> Example <p>Get the live ebikes and scooters as pandas.DataFrame</p> <pre><code>live_bikes = Bikes()\ndf_live_bikes = live_bikes.read()\n</code></pre> Source code in <code>lyft_bikes/bikes.py</code> <pre><code>class Bikes(LiveRequest):\n    \"\"\"Fetch the live feed of bikes and scooters.\n\n    Example:\n        Get the live ebikes and scooters as pandas.DataFrame\n\n        ```python\n        live_bikes = Bikes()\n        df_live_bikes = live_bikes.read()\n        ```\n\n    \"\"\"\n\n    url: str = \"https://gbfs.divvybikes.com/gbfs/en/free_bike_status.json\"\n    key: str = \"bikes\"\n</code></pre>"},{"location":"modules/dates/","title":"Dates","text":""},{"location":"modules/dates/#lyft_bikes.historical.dates.DateRangeError","title":"<code>DateRangeError</code>","text":"<p>               Bases: <code>Exception</code></p> <p>This date is before the Divvy start.</p> Source code in <code>lyft_bikes/historical/dates.py</code> <pre><code>class DateRangeError(Exception):\n    \"\"\"This date is before the Divvy start.\"\"\"\n</code></pre>"},{"location":"modules/dates/#lyft_bikes.historical.dates.DefaultDates","title":"<code>DefaultDates</code>","text":"Source code in <code>lyft_bikes/historical/dates.py</code> <pre><code>class DefaultDates:\n    def check_valid(self, date: datetime.date) -&gt; None:\n        if date &gt; self.last_date:\n            raise DateRangeError(f\"{date} data hasn't been released yet.\")\n\n    @property\n    def last_date(self) -&gt; datetime.date:\n        \"\"\"Latest available day in the historical dataset.\n\n        Based on the releases of the historical trips. Seems to be safe to include\n        the previous month.\n\n        \"\"\"\n        previous_month = datetime.date.today().replace(day=1) - relativedelta(months=1)\n        last_day_previous_month = monthrange(previous_month.year, previous_month.month)[\n            1\n        ]\n\n        return previous_month.replace(day=last_day_previous_month)\n\n    def create_date_range(self, start_date: str, end_date: str) -&gt; List[datetime.date]:\n        \"\"\"Return list of dates from start to end\"\"\"\n        dates = pd.date_range(\n            str(self.first_of_month(start_date)),\n            str(self.first_of_month(end_date)),\n            freq=\"MS\",\n        )\n\n        return [date.to_pydatetime().date() for date in dates]\n\n    @staticmethod\n    def first_of_month(date: str) -&gt; datetime.date:\n        return datetime.datetime.strptime(date, \"%Y-%m-%d\").date().replace(day=1)\n\n    @staticmethod\n    def to_date(year: int, month: int) -&gt; datetime.date:\n        return datetime.date(year, month, 1)\n</code></pre>"},{"location":"modules/dates/#lyft_bikes.historical.dates.DefaultDates.last_date","title":"<code>last_date</code>  <code>property</code>","text":"<p>Latest available day in the historical dataset.</p> <p>Based on the releases of the historical trips. Seems to be safe to include the previous month.</p>"},{"location":"modules/dates/#lyft_bikes.historical.dates.DefaultDates.create_date_range","title":"<code>create_date_range(start_date, end_date)</code>","text":"<p>Return list of dates from start to end</p> Source code in <code>lyft_bikes/historical/dates.py</code> <pre><code>def create_date_range(self, start_date: str, end_date: str) -&gt; List[datetime.date]:\n    \"\"\"Return list of dates from start to end\"\"\"\n    dates = pd.date_range(\n        str(self.first_of_month(start_date)),\n        str(self.first_of_month(end_date)),\n        freq=\"MS\",\n    )\n\n    return [date.to_pydatetime().date() for date in dates]\n</code></pre>"},{"location":"modules/dates/#lyft_bikes.historical.dates.DivvyDates","title":"<code>DivvyDates</code>","text":"<p>               Bases: <code>DefaultDates</code></p> <p>Class that stores and calculates different dates associated with the Divvy Program.</p> Source code in <code>lyft_bikes/historical/dates.py</code> <pre><code>class DivvyDates(DefaultDates):\n    \"\"\"Class that stores and calculates different dates associated with the Divvy Program.\"\"\"\n\n    first_date = datetime.date(2020, 4, 1)\n    electric_trials = datetime.date(2020, 7, 13)\n    first_electric_date = datetime.date(2020, 7, 28)\n    # Last day of the west of Western pricing\n    end_of_waiver = datetime.date(2022, 5, 10)\n\n    def check_valid(self, date: datetime.date) -&gt; None:\n        super().check_valid(date)\n\n        if date &lt; self.first_date:\n            raise DateRangeError(f\"{date} is before the historical trips.\")\n</code></pre>"},{"location":"modules/downloader/","title":"Downloader","text":""},{"location":"modules/downloader/#lyft_bikes.historical.downloader.BayWheelsDownloader","title":"<code>BayWheelsDownloader</code>","text":"<p>               Bases: <code>BaseDownloader</code></p> <p>Class to download historical trips from BayBikes in San Francisco.</p> <p>Index for all the historical trips found here.</p> Source code in <code>lyft_bikes/historical/downloader.py</code> <pre><code>class BayWheelsDownloader(BaseDownloader):\n    \"\"\"Class to download historical trips from BayBikes in San Francisco.\n\n    Index for all the historical trips found &lt;a href=\"https://s3.amazonaws.com/baywheels-data/index.html\"&gt;here&lt;/a&gt;.\n\n    \"\"\"\n\n    base_url = \"https://s3.amazonaws.com/baywheels-data\"\n\n    def file_name(self, date: datetime.date, suffix: str) -&gt; str:\n        return f\"{date:%Y%m}-baywheels-tripdata.{suffix}\"\n\n    def url(self, date: datetime.date):\n        return f\"{self.base_url}/{self.file_name(date=date, suffix='csv.zip')}\"\n</code></pre>"},{"location":"modules/downloader/#lyft_bikes.historical.downloader.CapitalBikeshareDownloader","title":"<code>CapitalBikeshareDownloader</code>","text":"<p>               Bases: <code>BaseDownloader</code></p> <p>Class to download historical trips from Capital Bikeshare in Washington DC.</p> <p>Index for all the historical trips found here.</p> Source code in <code>lyft_bikes/historical/downloader.py</code> <pre><code>class CapitalBikeshareDownloader(BaseDownloader):\n    \"\"\"Class to download historical trips from Capital Bikeshare in Washington DC.\n\n    Index for all the historical trips found &lt;a href=\"https://s3.amazonaws.com/capitalbikeshare-data/index.html\"&gt;here&lt;/a&gt;.\n\n    \"\"\"\n\n    base_url = \"https://s3.amazonaws.com/capitalbikeshare-data\"\n\n    def file_name(self, date: datetime.date, suffix: str) -&gt; str:\n        return f\"{date:%Y%m}-capitalbikeshare-tripdata.{suffix}\"\n</code></pre>"},{"location":"modules/downloader/#lyft_bikes.historical.downloader.CitiBikesDownloader","title":"<code>CitiBikesDownloader</code>","text":"<p>               Bases: <code>BaseDownloader</code></p> <p>Class to download historical trips from CitiBikes in New York City.</p> <p>Index for all the historical trips found here.</p> Source code in <code>lyft_bikes/historical/downloader.py</code> <pre><code>class CitiBikesDownloader(BaseDownloader):\n    \"\"\"Class to download historical trips from CitiBikes in New York City.\n\n    Index for all the historical trips found &lt;a href=\"https://s3.amazonaws.com/tripdata/index.html\"&gt;here&lt;/a&gt;.\n\n    \"\"\"\n\n    base_url = \"https://s3.amazonaws.com/tripdata\"\n\n    def file_name(self, date: datetime.date, suffix: str) -&gt; str:\n        return f\"JC-{date:%Y%m}-citibike-tripdata.{suffix}\"\n\n    def url(self, date: datetime.date):\n        return f\"{self.base_url}/{self.file_name(date=date, suffix='csv.zip')}\"\n</code></pre>"},{"location":"modules/downloader/#lyft_bikes.historical.downloader.CoGoDownloader","title":"<code>CoGoDownloader</code>","text":"<p>               Bases: <code>BaseDownloader</code></p> <p>Class to download historical trips from CoGo in Columbus.</p> <p>Index for all the historical trips found here.</p> Source code in <code>lyft_bikes/historical/downloader.py</code> <pre><code>class CoGoDownloader(BaseDownloader):\n    \"\"\"Class to download historical trips from CoGo in Columbus.\n\n    Index for all the historical trips found &lt;a href=\"https://cogo-sys-data.s3.amazonaws.com/index.html\"&gt;here&lt;/a&gt;.\n\n    \"\"\"\n\n    base_url = \"https://cogo-sys-data.s3.amazonaws.com\"\n\n    def file_name(self, date: datetime.date, suffix: str) -&gt; str:\n        return f\"{date:%Y%m}-cogo-tripdata.{suffix}\"\n</code></pre>"},{"location":"modules/downloader/#lyft_bikes.historical.downloader.DivvyDownloader","title":"<code>DivvyDownloader</code>","text":"<p>               Bases: <code>BaseDownloader</code></p> <p>Class to download historical trips from Divvy in Chicago.</p> <p>Index for all the historical trips found here.</p> <p>Currently only supports the files with the form <code>%Y%m-divvy-tripdata.zip</code> that go back until April 2020</p> Source code in <code>lyft_bikes/historical/downloader.py</code> <pre><code>class DivvyDownloader(BaseDownloader):\n    \"\"\"Class to download historical trips from Divvy in Chicago.\n\n    Index for all the historical trips found &lt;a href=\"https://divvy-tripdata.s3.amazonaws.com/index.html\"&gt;here&lt;/a&gt;.\n\n    Currently only supports the files with the form `%Y%m-divvy-tripdata.zip` that go back until\n    April 2020\n\n    \"\"\"\n\n    base_url = \"https://divvy-tripdata.s3.amazonaws.com\"\n\n    def file_name(self, date: datetime.date, suffix: str) -&gt; str:\n        return f\"{date:%Y%m}-divvy-tripdata.{suffix}\"\n</code></pre>"},{"location":"modules/historical/","title":"Historical","text":""},{"location":"modules/historical/#lyft_bikes.historical.historical.HistoricalTrips","title":"<code>HistoricalTrips</code>","text":"Source code in <code>lyft_bikes/historical/historical.py</code> <pre><code>class HistoricalTrips:\n    def __init__(self, dates: Dates, downloader: Downloader):\n        self.dates = dates\n        self.downloader = downloader\n\n    def get_months_trips(self, year: int, month: int) -&gt; pd.DataFrame:\n        \"\"\"Return pandas.DataFrame for a given year and month\"\"\"\n        date = self.dates.to_date(year, month)\n        self.dates.check_valid(date)\n\n        return self.downloader.read(date=date)\n\n    def read(\n        self,\n        start_date: str,\n        start_time_col: str = \"started_at\",\n        end_date: Union[str, None] = None,\n    ) -&gt; pd.DataFrame:\n        \"\"\"Return historical trips for a given range of dates\n\n        Args:\n            start_date: start date for the data in %Y-%m-%d format\n            start_col_col: column name for the start time\n            end_date: end date in the same format. Defaults to last date available\n\n        Returns:\n            Historical trip DataFrame for the date range provided.\n\n        Examples:\n            Read trips from Jan 1st 2021 until Feb 1st 2021\n\n            &gt;&gt;&gt; trips = HistoricalTrips()\n            &gt;&gt;&gt; df_trips = trips.read(start_date=\"2021-01-01\", end_date=\"2021-02-01\")\n\n            Read trips from Jan 1st 2021 until the last date available\n\n            &gt;&gt;&gt; df_trips = trips.read(start_date=\"2021-01-01\")\n\n        \"\"\"\n        if end_date is None:\n            end_date = str(self.dates.last_date)\n\n        df_trips = pd.concat(\n            [\n                self.get_months_trips(date.year, date.month)\n                for date in self.dates.create_date_range(start_date, end_date)\n            ],\n            ignore_index=True,\n        )\n\n        try:\n            date = pd.to_datetime(df_trips[start_time_col]).dt.date.astype(str)\n            idx = (date &gt;= start_date) &amp; (date &lt;= end_date)\n            return df_trips.loc[idx, :].reset_index(drop=True)\n        except KeyError:\n            warnings.warn(\n                f\"The column {start_time_col} does not exist. Returning all trips instead.\",\n                UserWarning,\n            )\n            return df_trips\n</code></pre>"},{"location":"modules/historical/#lyft_bikes.historical.historical.HistoricalTrips.get_months_trips","title":"<code>get_months_trips(year, month)</code>","text":"<p>Return pandas.DataFrame for a given year and month</p> Source code in <code>lyft_bikes/historical/historical.py</code> <pre><code>def get_months_trips(self, year: int, month: int) -&gt; pd.DataFrame:\n    \"\"\"Return pandas.DataFrame for a given year and month\"\"\"\n    date = self.dates.to_date(year, month)\n    self.dates.check_valid(date)\n\n    return self.downloader.read(date=date)\n</code></pre>"},{"location":"modules/historical/#lyft_bikes.historical.historical.HistoricalTrips.read","title":"<code>read(start_date, start_time_col='started_at', end_date=None)</code>","text":"<p>Return historical trips for a given range of dates</p> <p>Parameters:</p> Name Type Description Default <code>start_date</code> <code>str</code> <p>start date for the data in %Y-%m-%d format</p> required <code>start_col_col</code> <p>column name for the start time</p> required <code>end_date</code> <code>Union[str, None]</code> <p>end date in the same format. Defaults to last date available</p> <code>None</code> <p>Returns:</p> Type Description <code>DataFrame</code> <p>Historical trip DataFrame for the date range provided.</p> <p>Examples:</p> <p>Read trips from Jan 1st 2021 until Feb 1st 2021</p> <pre><code>&gt;&gt;&gt; trips = HistoricalTrips()\n&gt;&gt;&gt; df_trips = trips.read(start_date=\"2021-01-01\", end_date=\"2021-02-01\")\n</code></pre> <p>Read trips from Jan 1st 2021 until the last date available</p> <pre><code>&gt;&gt;&gt; df_trips = trips.read(start_date=\"2021-01-01\")\n</code></pre> Source code in <code>lyft_bikes/historical/historical.py</code> <pre><code>def read(\n    self,\n    start_date: str,\n    start_time_col: str = \"started_at\",\n    end_date: Union[str, None] = None,\n) -&gt; pd.DataFrame:\n    \"\"\"Return historical trips for a given range of dates\n\n    Args:\n        start_date: start date for the data in %Y-%m-%d format\n        start_col_col: column name for the start time\n        end_date: end date in the same format. Defaults to last date available\n\n    Returns:\n        Historical trip DataFrame for the date range provided.\n\n    Examples:\n        Read trips from Jan 1st 2021 until Feb 1st 2021\n\n        &gt;&gt;&gt; trips = HistoricalTrips()\n        &gt;&gt;&gt; df_trips = trips.read(start_date=\"2021-01-01\", end_date=\"2021-02-01\")\n\n        Read trips from Jan 1st 2021 until the last date available\n\n        &gt;&gt;&gt; df_trips = trips.read(start_date=\"2021-01-01\")\n\n    \"\"\"\n    if end_date is None:\n        end_date = str(self.dates.last_date)\n\n    df_trips = pd.concat(\n        [\n            self.get_months_trips(date.year, date.month)\n            for date in self.dates.create_date_range(start_date, end_date)\n        ],\n        ignore_index=True,\n    )\n\n    try:\n        date = pd.to_datetime(df_trips[start_time_col]).dt.date.astype(str)\n        idx = (date &gt;= start_date) &amp; (date &lt;= end_date)\n        return df_trips.loc[idx, :].reset_index(drop=True)\n    except KeyError:\n        warnings.warn(\n            f\"The column {start_time_col} does not exist. Returning all trips instead.\",\n            UserWarning,\n        )\n        return df_trips\n</code></pre>"},{"location":"modules/pricing/","title":"Pricing","text":"<p>Module to calculate pricing of divvy trips.</p>"},{"location":"modules/pricing/#lyft_bikes.pricing.AdditiveRate","title":"<code>AdditiveRate</code>","text":"<p>               Bases: <code>Rate</code></p> <p>A combination of two classes with addition.</p> Source code in <code>lyft_bikes/pricing.py</code> <pre><code>class AdditiveRate(Rate):\n    \"\"\"A combination of two classes with addition.\"\"\"\n\n    def __init__(self, left, right):\n        self.left = left\n        self.right = right\n\n    def __call__(self, duration: np.ndarray) -&gt; np.ndarray:\n        return self.left(duration=duration) + self.right(duration=duration)\n\n    def __repr__(self) -&gt; str:\n        return f\"AdditiveRate(left={self.left}, right={self.right})\"\n</code></pre>"},{"location":"modules/pricing/#lyft_bikes.pricing.MinuteRate","title":"<code>MinuteRate</code>  <code>dataclass</code>","text":"<p>               Bases: <code>Rate</code></p> <p>Amount in cents per minute starting at <code>start</code> minute.</p> <p>Parameters:</p> Name Type Description Default <code>amount</code> <code>int</code> <p>the cost in cents per minute</p> required <code>start</code> <code>int</code> <p>the minute where that cost starts</p> required Example <p>Rides that cost 15 cents per minute after 30 minutes of riding.</p> <pre><code>rate = MinuteRate(amount=15, start=30)\nrate([10, 15, 31]) # [0, 0, 16]\n</code></pre> Source code in <code>lyft_bikes/pricing.py</code> <pre><code>@dataclass\nclass MinuteRate(Rate):\n    \"\"\"Amount in cents per minute starting at `start` minute.\n\n    Args:\n        amount: the cost in cents per minute\n        start: the minute where that cost starts\n\n    Example:\n        Rides that cost 15 cents per minute after 30 minutes of riding.\n\n        ```python\n        rate = MinuteRate(amount=15, start=30)\n        rate([10, 15, 31]) # [0, 0, 16]\n        ```\n\n    \"\"\"\n\n    amount: int\n    start: int\n\n    def __call__(self, duration: np.ndarray) -&gt; np.ndarray:\n        return np.maximum(np.rint(duration) - self.start, 0) * self.amount\n</code></pre>"},{"location":"modules/pricing/#lyft_bikes.pricing.Rate","title":"<code>Rate</code>","text":"<p>All pricing will derive from this class.</p> Source code in <code>lyft_bikes/pricing.py</code> <pre><code>class Rate:\n    \"\"\"All pricing will derive from this class.\"\"\"\n\n    def __call__(self, duration: np.ndarray) -&gt; np.ndarray:\n        \"\"\"Calculate the rate for a given set of durations. Vectorized.\"\"\"\n\n    def __add__(self, other):\n        return AdditiveRate(self, other)\n</code></pre>"},{"location":"modules/pricing/#lyft_bikes.pricing.Rate.__call__","title":"<code>__call__(duration)</code>","text":"<p>Calculate the rate for a given set of durations. Vectorized.</p> Source code in <code>lyft_bikes/pricing.py</code> <pre><code>def __call__(self, duration: np.ndarray) -&gt; np.ndarray:\n    \"\"\"Calculate the rate for a given set of durations. Vectorized.\"\"\"\n</code></pre>"},{"location":"modules/pricing/#lyft_bikes.pricing.UnlockFee","title":"<code>UnlockFee</code>  <code>dataclass</code>","text":"<p>               Bases: <code>Rate</code></p> <p>Amount in cents to unlock the bike.</p> Source code in <code>lyft_bikes/pricing.py</code> <pre><code>@dataclass\nclass UnlockFee(Rate):\n    \"\"\"Amount in cents to unlock the bike.\"\"\"\n\n    amount: int\n\n    def __call__(self, duration: np.ndarray) -&gt; np.ndarray:\n        return np.ones_like(duration) * self.amount\n</code></pre>"},{"location":"modules/stations/","title":"Stations","text":"<p>Access station information and status. More to come.</p>"}]}